import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from services import payments
from services.storage import get_active_round, get_user, create_payment_record
from locales.translations import translations
from config import SUPPORTED_CURRENCIES
from states import Play
from .common import get_currency_keyboard, get_back_to_menu_keyboard

router = Router()
log = logging.getLogger(__name__)

# QR sending is optional; disabled by default and kept safe (no hard import of qrcode/io)
_QR_AVAILABLE = False

@router.callback_query(F.data == "buy_ticket")
async def cb_buy_ticket(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤"""
    # Load user with wallets to validate presence of at least one payout wallet
    user = await get_user(session, callback.from_user.id, with_wallets=True)
    if not user:
        await callback.answer("‚ùå User not found")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫
    if not user.wallets:
        await callback.answer(
            "‚ùå Please set up your payout wallet first!",
            show_alert=True
        )
        return

    await state.set_state(Play.choosing_payment_currency)
    await callback.message.edit_text(
        translations[user.language_code]['choose_payment_currency'],
        reply_markup=get_currency_keyboard(user.language_code, prefix="currency")
    )
    await callback.answer()

@router.callback_query(Play.choosing_payment_currency, F.data.startswith("currency_"))
async def process_currency_choice(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    currency_code = callback.data.split("_", 1)[1]

    if currency_code not in SUPPORTED_CURRENCIES:
        await callback.answer("‚ùå Invalid currency selected.", show_alert=True)
        return

    await state.clear()

    try:
        user = await get_user(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå User not found")
            return

        lang = user.language_code
        active_round = await get_active_round(session)

        if not active_round:
            await callback.answer("‚ùå No active lottery round", show_alert=True)
            return

        # –†–∞—Å—á–µ—Ç –ø–æ 0.1$ –∑–∞ –±–∏–ª–µ—Ç: –º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º –±–∏–ª–µ—Ç–æ–≤ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è ENV
        from os import getenv
        ticket_price = float(getenv("TICKET_PRICE_USD", "0.1"))
        min_tickets = int(getenv("MIN_TICKETS_PER_PAYMENT", "2"))
        max_tickets = int(getenv("MAX_TICKETS_PER_PAYMENT", "5"))
        min_tickets = max(1, min_tickets)
        max_tickets = max(min_tickets, max_tickets)

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º –±–∏–ª–µ—Ç–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å UI –ø–æ–∑–∂–µ)
        ticket_count = min_tickets
        payment_amount = float(ticket_count) * ticket_price

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ NOWPayments API –ø–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É
        payment_info = await payments.create_payment(
            user.id,
            active_round.id,
            currency_code,
            payment_amount
        )

        if not payment_info:
            await callback.message.edit_text(
                translations[lang]["payment_failed"],
                reply_markup=get_back_to_menu_keyboard(lang)
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        await create_payment_record(
            session,
            payment_info['payment_id'],
            user.id,
            active_round.id,
            payment_amount
        )

        # –ü–æ–ª—É—á–∞–µ–º URL –æ–ø–ª–∞—Ç—ã
        payment_url = payment_info.get("payment_url") or payment_info.get("payment_link") \
                      or payment_info.get("url") or f"https://nowpayments.io/payments/{payment_info.get('payment_id')}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.delete()
        link_text = f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{payment_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>"
        await callback.bot.send_message(callback.from_user.id, link_text, parse_mode="HTML")

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: QR-–∫–æ–¥ –¥–ª—è –∞–¥—Ä–µ—Å–∞ (–ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
        if _QR_AVAILABLE and payment_info.get("pay_address"):
            try:
                import qrcode  # type: ignore
                import io  # type: ignore
                qr_img = qrcode.make(payment_info["pay_address"])
                buf = io.BytesIO()
                qr_img.save(buf, "PNG")
                buf.seek(0)
                # QR –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π/–∫–æ–º–∞–Ω–¥–æ–π, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
            except Exception as qr_err:
                log.warning(f"QR generation skipped: {qr_err}")

        log.info(f"Payment created for user {user.id}: {payment_info['payment_id']}")
        await callback.answer()

    except Exception as e:
        log.error(f"Error creating payment for user {callback.from_user.id}: {e}")
        await callback.answer("‚ùå Error creating payment. Please try again.", show_alert=True)
